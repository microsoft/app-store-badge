{"version":3,"file":"psi-service.js","sourceRoot":"","sources":["psi-service.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,kFAAkF;AAClF,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,SAAiB,EAAE,WAAmB,EAAE,OAAO,GAAG,EAAE,EAAE,GAAW;IACzG,MAAM,0BAA0B,GAAG,WAAW,CAAC;IAC/C,iBAAiB;IACjB,MAAM,cAAc,GAAG;QACnB,MAAM,EAAE,KAAK;QACb,OAAO,EAAE;YACL,4CAA4C;YAC5C,QAAQ,EAAE,4BAA4B;YACtC,SAAS,EAAE,QAAQ,CAAC,GAAG;YACvB,+BAA+B,EAAE,KAAK;YACtC,kBAAkB,EAAE,MAAM,CAAC,UAAU,EAAE;YACvC,cAAc,EAAE,0BAA0B;SAC7C;QACD,KAAK,EAAE,UAA0B;QACjC,MAAM,EAAE,IAAI,eAAe,CAAC,GAAG,CAAC;KACnC,CAAC;IACF,MAAM,aAAa,GAAG,EAAE,GAAG,cAAc,EAAE,GAAG,OAAO,EAAE,CAAC;IAExD,qCAAqC;IACrC,IAAI,QAAQ,GAAoB,IAAI,CAAC;IACrC,IAAI;QACA,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,GAAG,EAAE,EAAE,aAAa,CAAC,CAAC;KACnD;IAAC,OAAO,KAAK,EAAE;QACZ,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,qCAAqC,SAAS,SAAS,0BAA0B,IAAI,CAAC,CAAC,4BAA4B;KAC7I;IAED,iBAAiB;IACjB,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,EAAE,EAAE;QACd,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,8CAA8C;KACxE;SAAM;QACH,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,6CAA6C;KAC3E;IAED,6DAA6D;IAC7D,KAAK,UAAU,WAAW,CAAC,QAAkB;QACzC,MAAM,kBAAkB,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACvE,IAAI,QAAQ,GAAG,GAAG,WAAW,gBAAgB,CAAC,CAAC,oBAAoB;QACnE,IAAI,kBAAkB,EAAE;YACpB,MAAM,KAAK,GAAG,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,KAAK,CAAC,6BAA6B,CAAC,CAAC;YACvE,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;gBACnB,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;aACvB;SACJ;QAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,MAAM,OAAO,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAE1C,yDAAyD;QACzD,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QAC5B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAEhC,IAAI;YACA,wBAAwB;YACxB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,oCAAoC;YACpC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;SAC3D;QAAC,OAAO,KAAK,EAAE;SACf;gBAAS;YACN,sDAAsD;YACtD,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAC7B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SACnC;IACL,CAAC;IAED,2CAA2C;IAC3C,KAAK,UAAU,eAAe,CAAC,QAAyB;QACpD,MAAM,MAAM,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC;QAChC,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,qCAAqC,SAAS,SAAS,0BAA0B,GAAG,MAAM,EAAE,CAAC,CAAC,uBAAuB;IAChJ,CAAC;AACL,CAAC","sourcesContent":["/**\r\n * PSI service class which helps perform the default product acquisition method by calling the service endpoint \r\n * and fetching an installer template for the user to receive back on the client-side and install the product.\r\n */\r\n// Perform PSI acquisition flow using download URL, send error if invalid response\r\nexport async function performPSIAcquisition(productId: string, productName: string, options = {}, url: string): Promise<void> {\r\n    const psiServiceFailedOcidPrefix = \"psi_f_svc\";\r\n    // Set up request\r\n    const defaultOptions = {\r\n        method: \"GET\",\r\n        headers: {\r\n            // Origin and referer overwritten by browser\r\n            \"Origin\": \"https://apps.microsoft.com\",\r\n            \"Referer\": document.URL,\r\n            \"Access-Control-Request-Method\": \"GET\",\r\n            \"X-Correlation-Id\": crypto.randomUUID(),\r\n            \"Content-Type\": \"application/octet-stream\"\r\n        },\r\n        cache: \"no-cache\" as RequestCache, // Don't cache locally, need to request new template from server\r\n        params: new URLSearchParams(url)\r\n    };\r\n    const mergedOptions = { ...defaultOptions, ...options };\r\n\r\n    // Attempt to fetch response from url\r\n    let response: Response | null = null;\r\n    try {\r\n        response = await fetch(`${url}`, mergedOptions);\r\n    } catch (error) {\r\n        window.location.href = `ms-windows-store://pdp/?productid=${productId}&ocid=${psiServiceFailedOcidPrefix}na`; // Redirect to fallback mode\r\n    }\r\n\r\n    // Parse response\r\n    if (response?.ok) {\r\n        getDownload(response); // If response ok, get blob installer template\r\n    } else {\r\n        onResponseError(response); // If response not ok, log error and redirect\r\n    }\r\n\r\n    // Helper method to retrieve installer template from response\r\n    async function getDownload(response: Response) {\r\n        const contentDisposition = response.headers.get(\"Content-Disposition\");\r\n        let filename = `${productName} Installer.exe`; // Default file name\r\n        if (contentDisposition) {\r\n            const match = contentDisposition?.match(/filename\\*=UTF-8''([\\w%]*)/i);\r\n            if (match && match[1]) {\r\n                filename = match[1];\r\n            }\r\n        }\r\n\r\n        const data = await response.blob();\r\n        const fileURL = URL.createObjectURL(data);\r\n\r\n        // Create a hidden link element and initiate the download\r\n        const link = document.createElement(\"a\");\r\n        link.href = fileURL;\r\n        link.download = decodeURIComponent(filename);\r\n        link.style.display = \"none\";\r\n        document.body.appendChild(link);\r\n\r\n        try {\r\n            // Initiate the download\r\n            link.click();\r\n            // Wait for the download to complete\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n        } catch (error) {\r\n        } finally {\r\n            // Safely clean up the object URL and the link element\r\n            URL.revokeObjectURL(fileURL);\r\n            document.body.removeChild(link);\r\n        }\r\n    }\r\n\r\n    // Helper method to log error from response\r\n    async function onResponseError(response: Response | null) {\r\n        const status = response?.status;\r\n        window.location.href = `ms-windows-store://pdp/?productid=${productId}&ocid=${psiServiceFailedOcidPrefix}${status}`; // Fallback to full PDP\r\n    }\r\n}"]}